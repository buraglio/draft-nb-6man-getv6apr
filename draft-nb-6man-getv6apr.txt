



IPv6 Maintenance                                             N. Buraglio
Internet-Draft                                   Energy Sciences Network
Intended status: Standards Track                         17 October 2025
Expires: 20 April 2026


  IPv6 mechanism for determining source and destination address pairs
                     draft-nb-6man-getv6apr-latest

Abstract

   This provides a comprehensive mechanism for determining a "best use"
   source address / destination address (SA/DA) pair for IPv6
   connections and is intended to be a modernized replacement for
   existing SA/DA algorithms such as socket.getaddrinfo().  Instead of
   the current methodology of returning a list of destination addresses,
   this returns a list of source and destination address pairs, which
   are evaluated based on pre-determined and potentially user defined
   criteria.  This mitigates the problem of the operating system
   choosing an inappropriate source address, as can occur with legacy
   mechanisms.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-nb-6man-getv6apr/.

   Discussion of this document takes place on the IPv6 Maintenance
   Working Group mailing list (mailto:ipv6@ietf.org), which is archived
   at https://mailarchive.ietf.org/arch/browse/ipv6/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/ipv6/.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 20 April 2026.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Current Implementations and Inherent Limitations
   4.  Proposed
     4.1.  Source address enumeration and availability handling
     4.2.  Active probing
     4.3.  State caching
     4.4.  Operating system differences
   5.  Example Code
   6.  Security Considerations
   7.  IANA Considerations
   8.  References
     8.1.  Normative References
     8.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   With the rapid expansion of IPv6 and the building momentum of
   retiring IPv4 as a protocol, the exposure of limits of current
   implementations of IPv6 source and destination address selection has
   become acutely more apparent.  [RFC6724] has frequently been analyzed
   and in many cases deemed in need of a refresh, if only to address
   limits of the emergence of dual-stack and now the removal of IPv4.
   IPv6 by design supports and employs multiple addresses per interface.
   Be cause of this feature, there is necessarily a set of heuristics to
   determine which address to use for a given operation.  Thus far, the
   algorithm has operated well enough to allow for successful
   deployments and operational supportability.  However, it is limited
   and somewhat inconsistent in the overall implementations across
   platforms.  Because of these limited, and with the evolving reliance
   internetwork connectivity, the "always connected" expectation of
   general users, there is a necessary evolution required for continued
   expansion of the IPv6 protocol as it pertains to host source and
   address selection.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   SA: Source Address

   DA: Destination Address

   Dual-Stack: Configuration of a device network interfaces as to
   originate and understand both IPv4 and IPv6 packets.  Known Local
   Prefix: A prefix known to be local to the administrative domain of
   the network the host resides on at a given time.

   Known Local Prefix: A prefix known to be local to the administrative
   domain of the network the host resides on at a given time.

3.  Current Implementations and Inherent Limitations

   Current implementations of SA/DA selection are limited in several
   notable ways.  Current implementations include a lack of definable
   user control over source and destination address selection pairs,
   limited or no mechanism for periodic testing of address pairs and no
   inherent way to support performance and availability of resources.
   The most common implementations are derived from the getaddrinfo()
   implementation which returns one or more addrinfo structures, each of
   which contains an Internet address that can be specified in a call to
   bind() or connect() as described in [GETADDRINFO].

   via [RFC6724]:

   In this implementation architecture, applications use APIs [10] like
   getaddrinfo() that return a list of addresses to the application.
   This list might contain both IPv6 and IPv4 addresses (sometimes
   represented as IPv4-mapped addresses).  The application then passes a
   destination address to the network stack with connect() or sendto().
   the application would then typically try the first address in the
   list, looping over the list of addresses until it finds a working
   address.  In any case, the network layer is never in a situation
   where it needs to choose a destination address from several
   alternatives.

4.  Proposed

4.1.  Source address enumeration and availability handling

   A given host will have multiple addresses in an environment that
   support IPv6, and will have multiple addresses in different address
   families when operating on a dual-stacked network.  Because there may
   exist multiple valid destination addresses returned from any given
   DNS query, consisting of both IPv6 and IPv4 addresses as well as the
   potential presence of a known local address that is unique to the
   particular network locality, a mechanism for enumerating and testing
   each address pair must exist in order to ensure both appropriate
   resource use (i.e. using a known local address when operating on the
   known-local network).

4.2.  Active probing

   Due to the dynamic nature of internetworking, active probing of
   destinations in use should be performed to ensure the best possible
   and most performant destination is cached for use.  This active
   probing includes all destinations returned by a DNS query for a given
   resource.  These targets are stored in a local cache and ranked by
   best performance as defined by the fastest response time from each
   source address local to the host.

   Probing targets should rotate and be refreshed at a regular interval
   in order to prevent unintentional oversubscription of both the probe
   targets and any intermediary links in the path.

4.3.  State caching

   Each system process should cache the source and destination address
   pairs in a ranked order for system-wide reference by any application
   requesting network resources, or by the operating system itself.

4.4.  Operating system differences

5.  Example Code

   A working implementation of address pair enumeration, testing, and
   active probing called written in Python [GETAPR] can be found on
   GitHub here.

   A Go implementation of network path analysis tool that tests
   connectivity between source and destination addresses, enumerating
   address pair availability and latency can he found here [GETRAPR-GO]

   Add agreed upon code here

6.  Security Considerations

   TODO Security

7.  IANA Considerations

   This document has no IANA actions.

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC4193]  Hinden, R. and B. Haberman, "Unique Local IPv6 Unicast
              Addresses", RFC 4193, DOI 10.17487/RFC4193, October 2005,
              <https://www.rfc-editor.org/rfc/rfc4193>.

   [RFC7078]  Matsumoto, A., Fujisaki, T., and T. Chown, "Distributing
              Address Selection Policy Using DHCPv6", RFC 7078,
              DOI 10.17487/RFC7078, January 2014,
              <https://www.rfc-editor.org/rfc/rfc7078>.

   [RFC7526]  Troan, O. and B. Carpenter, Ed., "Deprecating the Anycast
              Prefix for 6to4 Relay Routers", BCP 196, RFC 7526,
              DOI 10.17487/RFC7526, May 2015,
              <https://www.rfc-editor.org/rfc/rfc7526>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC8925]  Colitti, L., Linkova, J., Richardson, M., and T.
              Mrugalski, "IPv6-Only Preferred Option for DHCPv4",
              RFC 8925, DOI 10.17487/RFC8925, October 2020,
              <https://www.rfc-editor.org/rfc/rfc8925>.

8.2.  Informative References

   [GETADDRINFO]
              "Linux MAN page for getaddrinfo()", n.d.,
              <https://man7.org/linux/man-pages/man3/
              getaddrinfo.3.html>.

   [GETAPR]   "Example Python code repo", n.d.,
              <https://github.com/becarpenter/getapr>.

   [GETAPR-GO]
              "Example GoLang code repo", n.d.,
              <https://github.com/buraglio/getapr-golang>.

   [RFC6724]  Thaler, D., Ed., Draves, R., Matsumoto, A., and T. Chown,
              "Default Address Selection for Internet Protocol Version 6
              (IPv6)", RFC 6724, DOI 10.17487/RFC6724, September 2012,
              <https://www.rfc-editor.org/rfc/rfc6724>.

Acknowledgments

   The authors would like to acknowledge the valuable input from Brian
   Carpenter

Author's Address

   Nick Buraglio
   Energy Sciences Network
   Email: buraglio@forwardingplane.net
